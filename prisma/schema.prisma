// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id           Int       @id @default(autoincrement())
  name         String
  description  String?
  date_created DateTime  @default(now())
  products     Product[]
}

model Product {
  id           Int          @id @default(autoincrement())
  name         String
  image        String?
  price        Int
  description  String?
  trending     Boolean      @default(false)
  featured     Boolean      @default(false)
  categoryId   Int
  category     Category     @relation(fields: [categoryId], references: [id])
  date_created DateTime     @default(now())
  cartItems    CartItems[]
  OrderItems   OrderItems[]
}

model User {
  id           Int      @id @default(autoincrement())
  email        String   @unique
  firstName    String?
  lastName     String?
  password     String
  role         Role?
  date_created DateTime @default(now())
  cart         Cart[]
  Order        Order[]
}

enum Role {
  ADMIN
  USER
}

model Cart {
  id        Int         @id @default(autoincrement())
  userId    Int?        @unique
  user      User?       @relation(fields: [userId], references: [id])
  cartItems CartItems[]
}

model CartItems {
  id         Int      @id @default(autoincrement())
  cartId     Int?
  cart       Cart?    @relation(fields: [cartId], references: [id])
  productId  Int?
  product    Product? @relation(fields: [productId], references: [id])
  paid       Boolean  @default(false)
  amount     Int
  quantity   Int
  added_date DateTime @default(now())
}

model Order {
  id            Int          @id @default(autoincrement())
  user          User?        @relation(fields: [userId], references: [id])
  userId        Int?
  orderId       String       @unique
  fullName     String?
  email         String?
  address       String?
  phone         String?
  transactionId String?
  status        Status?      @default(PENDING)
  amount        Float?
  orderItems    OrderItems[]
  created_at    DateTime     @default(now())
}

enum Status {
  PENDING
  COMPLETED
  CANCELLED
}

model OrderItems {
  id        Int      @id @default(autoincrement())
  order     Order?   @relation(fields: [orderId], references: [id])
  orderId   Int?
  products  Product? @relation(fields: [productId], references: [id])
  productId Int?
  quantity  Int
  amount    Float
  paid      Boolean  @default(false)
}
